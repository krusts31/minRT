Mmain	main.c	/^int	main(int argc, char **argv)$/
Mtest	test.c	/^int	main()$/
argc_error	utils3.c	/^int	argc_error(char *str)$/
char_parce	parce.c	/^char	char_parce(unsigned char *col, t_pars_vars **/
error	utils4.c	/^short	error(t_pars_vars **vars, short ret, t_task /
error_con	utils4.c	/^void	error_con(t_pars_vars **vars, t_task **task)$/
fl_parce	parce.c	/^char	fl_parce(float *value, t_pars_vars **vars)$/
free_cy	utils2.c	/^void	free_cy(t_task **task)$/
free_light	utils2.c	/^void	free_light(t_task **task)$/
free_pl	utils2.c	/^void	free_pl(t_task **task)$/
free_sp	utils2.c	/^void	free_sp(t_task **task)$/
free_sq	utils3.c	/^void	free_sq(t_task **task)$/
free_tr	utils2.c	/^void	free_tr(t_task **task)$/
ft_Amb_con	Amb.c	/^char	ft_Amb_con(t_task **task, t_pars_vars **vars,/
ft_Amb_con1	Amb.c	/^char	ft_Amb_con1(t_task **task, t_pars_vars **vars/
ft_atof	utils.c	/^float	ft_atof(const char *nptr)$/
ft_atof_con	utils.c	/^float	ft_atof_con(const char *nptr, float res, flo/
ft_camera_con	camera2.c	/^char	ft_camera_con(t_camera **camera, t_pars_vars /
ft_camera_con2	camera2.c	/^char	ft_camera_con2(t_camera **camera, t_pars_vars/
ft_check_Amb	Amb.c	/^char	ft_check_Amb(char hit, char hit_dig, char b_c/
ft_check_Amb2	Amb.c	/^char	ft_check_Amb2(char hit_dig, t_pars_vars **var/
ft_check_camera	camera.c	/^char	ft_check_camera(char hit, char hit_dig, char /
ft_check_camera2	camera2.c	/^char	ft_check_camera2(char hit_dig, t_pars_vars **/
ft_check_cy	cylinder.c	/^char	ft_check_cy(char hit, char hit_dig, char b_ch/
ft_check_cy2	cylinder2.c	/^char	ft_check_cy2(char hit_dig, t_pars_vars **vars/
ft_check_float	utils.c	/^float	ft_check_float(const char *nptr, float res, /
ft_check_light	light2.c	/^char	ft_check_light(char hit, char hit_dig, char b/
ft_check_light2	light.c	/^char	ft_check_light2(char hit_dig, t_pars_vars **v/
ft_check_pl	plane.c	/^char	ft_check_pl(char hit, char hit_dig, char b_ch/
ft_check_pl2	plane2.c	/^char	ft_check_pl2(char hit_dig, t_pars_vars **vars/
ft_check_res	Res.c	/^char	ft_check_res(char hit, char hit_dig, char b_c/
ft_check_sp	sphere2.c	/^char	ft_check_sp(char hit, char hit_dig, char b_ch/
ft_check_sp2	sphere.c	/^char	ft_check_sp2(char hit_dig, t_pars_vars **vars/
ft_check_sq	squar.c	/^char	ft_check_sq(char hit, char hit_dig, char b_ch/
ft_check_sq2	squar2.c	/^char	ft_check_sq2(char hit_dig, t_pars_vars **vars/
ft_check_tr	triangle.c	/^char	ft_check_tr(char hit, char hit_dig, char b_ch/
ft_check_tr2	triangle2.c	/^char	ft_check_tr2(char hit_dig, t_pars_vars **vars/
ft_cy_con	cylinder2.c	/^char	ft_cy_con(t_cy **cy, t_pars_vars **vars, char/
ft_cy_con2	cylinder2.c	/^char	ft_cy_con2(t_cy **cy, t_pars_vars **vars, cha/
ft_isfloat	utils.c	/^size_t	ft_isfloat(char fl)$/
ft_light_con	light.c	/^char	ft_light_con(t_light **light, t_pars_vars **v/
ft_light_con2	light.c	/^char	ft_light_con2(t_light **light, t_pars_vars **/
ft_lstadd_back_c	camera.c	/^void		ft_lstadd_back_c(t_camera **lst, t_camera *n/
ft_lstadd_back_cy	cylinder.c	/^void		ft_lstadd_back_cy(t_cy **lst, t_cy *new)$/
ft_lstadd_back_l	light2.c	/^void		ft_lstadd_back_l(t_light **lst, t_light *new/
ft_lstadd_back_pl	plane.c	/^void		ft_lstadd_back_pl(t_pl **lst, t_pl *new)$/
ft_lstadd_back_sp	sphere2.c	/^void		ft_lstadd_back_sp(t_sp **lst, t_sp *new)$/
ft_lstadd_back_sq	squar.c	/^void		ft_lstadd_back_sq(t_sq **lst, t_sq *new)$/
ft_lstadd_back_tr	triangle.c	/^void		ft_lstadd_back_tr(t_tr **lst, t_tr *new)$/
ft_lstlast_c	camera.c	/^t_camera	*ft_lstlast_c(t_camera *lst)$/
ft_lstlast_cy	cylinder.c	/^t_cy	*ft_lstlast_cy(t_cy *lst)$/
ft_lstlast_l	light2.c	/^t_light	*ft_lstlast_l(t_light *lst)$/
ft_lstlast_pl	plane.c	/^t_pl	*ft_lstlast_pl(t_pl *lst)$/
ft_lstlast_sp	sphere2.c	/^t_sp	*ft_lstlast_sp(t_sp *lst)$/
ft_lstlast_sq	squar.c	/^t_sq	*ft_lstlast_sq(t_sq *lst)$/
ft_lstlast_tr	triangle.c	/^t_tr	*ft_lstlast_tr(t_tr *lst)$/
ft_new_camera	camera.c	/^t_camera	*ft_new_camera()$/
ft_new_cy	cylinder.c	/^t_cy	*ft_new_cy()$/
ft_new_light	light2.c	/^t_light	*ft_new_light()$/
ft_new_pl	plane.c	/^t_pl	*ft_new_pl()$/
ft_new_sp	sphere2.c	/^t_sp	*ft_new_sp()$/
ft_new_sq	squar.c	/^t_sq	*ft_new_sq()$/
ft_new_tr	triangle.c	/^t_tr	*ft_new_tr()$/
ft_parc_Amb	Amb.c	/^char	ft_parc_Amb(t_task **task, t_pars_vars **vars/
ft_parc_camera	camera.c	/^char	ft_parc_camera(t_task **task, t_pars_vars **v/
ft_parc_cy	cylinder.c	/^char	ft_parc_cy(t_task **task, t_pars_vars **vars)/
ft_parc_light	light2.c	/^char	ft_parc_light(t_task **task, t_pars_vars **va/
ft_parc_pl	plane.c	/^char	ft_parc_pl(t_task **task, t_pars_vars **vars)/
ft_parc_res	Res.c	/^char	ft_parc_res(t_task **task, t_pars_vars **vars/
ft_parc_sp	sphere2.c	/^char	ft_parc_sp(t_task **task, t_pars_vars **vars)/
ft_parc_sq	squar.c	/^char	ft_parc_sq(t_task **task, t_pars_vars **vars)/
ft_parc_tr	triangle.c	/^char	ft_parc_tr(t_task **task, t_pars_vars **vars)/
ft_parce_args	main.c	/^int	ft_parce_args(t_task **task, t_pars_vars **var/
ft_parce_args2	main.c	/^char	ft_parce_args2(t_task **task, t_pars_vars **v/
ft_pl_con	plane2.c	/^char	ft_pl_con(t_pl **pl, t_pars_vars **vars, char/
ft_pl_con2	plane2.c	/^char	ft_pl_con2(t_pl **pl, t_pars_vars **vars, cha/
ft_res_con	Res.c	/^char	ft_res_con(t_task **task, t_pars_vars **vars,/
ft_size_t_len	utils3.c	/^size_t	ft_size_t_len(size_t nr)$/
ft_sp_con	sphere.c	/^char	ft_sp_con(t_sp **sp, t_pars_vars **vars, char/
ft_sp_con2	sphere.c	/^char	ft_sp_con2(t_sp **sp, t_pars_vars **vars, cha/
ft_sq_con	squar2.c	/^char	ft_sq_con(t_sq **sq, t_pars_vars **vars, char/
ft_sq_con2	squar2.c	/^char	ft_sq_con2(t_sq **sq, t_pars_vars **vars, cha/
ft_tr_con	triangle2.c	/^char	ft_tr_con(t_tr **tr, t_pars_vars **vars, char/
ft_tr_con2	triangle2.c	/^char	ft_tr_con2(t_tr **tr, t_pars_vars **vars, cha/
init	utils4.c	/^char	init(t_task **task, t_pars_vars **vars)$/
init_task	utils4.c	/^char	init_task(t_task **task)$/
parce_argv_1	main.c	/^char	parce_argv_1(char *argv)$/
t_amb_light	parcer.h	/^}			t_amb_light;$/
t_camera	parcer.h	/^}			t_camera;$/
t_cy	parcer.h	/^}			t_cy;$/
t_light	parcer.h	/^}			t_light;$/
t_pars_vars	parcer.h	/^}			t_pars_vars;$/
t_pl	parcer.h	/^}			t_pl;$/
t_sp	parcer.h	/^}			t_sp;$/
t_sq	parcer.h	/^}			t_sq;$/
t_task	parcer.h	/^}			t_task;$/
t_tr	parcer.h	/^}			t_tr;$/
