Mhooks	hooks.c	/^int             main(void)$/
Mmain	main.c	/^int     main()$/
close1	hooks.c	/^int close1(void *param)$/
close2	hooks.c	/^int             close2(int keycode, t_vars *vars)$/
color	main.c	/^static t_vec	*color(t_ray *ray, t_hit_list *hit_li/
compute_rand	sphere.c	/^static t_vec		*compute_rand(t_sphere_difuse_var **/
create_trgb	colors.c	/^int		create_trgb(int t, int r, int g, int b)$/
cross_vector	vector.c	/^t_vec	*cross_vector(t_vec *v1, t_vec *v2)$/
dot_vector	vector.c	/^float	dot_vector(t_vec *v1, t_vec *v2)$/
drawCircle	circle.c	/^void drawCircle(t_data *img,int xc, int yc, int x,/
draw_back_ground	main.c	/^static void	*draw_back_ground(t_data *img, t_camer/
free_camera	camera.c	/^void	*free_camera(t_camera **camera)$/
free_draw	utils.c	/^void	*free_draw(t_draw **draw)$/
free_rand	sphere.c	/^static t_vec		*free_rand(t_sphere_difuse_var **var/
ft_hex	hexagon.c	/^int	ft_hex(t_data *img, int x, int y, int size)$/
ft_hex1	hexagon.c	/^int	ft_hex1(t_data *img, int x, int y, int size)$/
ft_hex2	hexagon.c	/^int	ft_hex2(t_data *img, int x, int y, int size)$/
ft_hex3	hexagon.c	/^int	ft_hex3(t_data *img, int x, int y, int size)$/
ft_square	square.c	/^int	ft_square(t_data *img, int x, int y, int size)/
ft_triangle	triangle.c	/^int	ft_triangle(t_data *img, int x, int y, int siz/
ft_triangle1	triangle.c	/^int	ft_triangle1(t_data *img, int x, int y, int si/
get_b	colors.c	/^int		get_b(int trgb)$/
get_g	colors.c	/^int		get_g(int trgb)$/
get_r	colors.c	/^int		get_r(int trgb)$/
get_ray	camera.c	/^t_ray	*get_ray(float u, float v, t_camera *cam)$/
get_t	colors.c	/^int		get_t(int trgb)$/
hit_sphere	sphere.c	/^int			hit_sphere(t_ray *ray, float t_min, float t_/
hitable_list	hit_list.c	/^int	hitable_list(t_ray *ray, float t_min, float t_/
init_col_var	utils.c	/^int	init_col_var(t_col_var **var)$/
init_draw	utils.c	/^int	init_draw(t_draw **draw, int xs, int ys, int n/
key_hook	hooks.c	/^int             key_hook(int keycode, t_vars *vars/
length_of_vector	vector.c	/^float	length_of_vector(t_vec *self)$/
length_of_vector_pow2	vector_2.c	/^float	length_of_vector_pow2(t_vec *self)$/
malloc_list_2d	main.c	/^static t_hit_list	*malloc_list_2d(int size)$/
mouse_move	hooks.c	/^int		mouse_move(int x, int y, void *param)$/
mouse_press	hooks.c	/^int		mouse_press(int button, int x, int y, void *p/
my_mlx_pixel_put	pixel.c	/^void            my_mlx_pixel_put(t_data *data, int/
new_camera	camera.c	/^t_camera	*new_camera()$/
new_ray	ray.c	/^t_ray	*new_ray(t_vec *vec1, t_vec *vec2)$/
new_vector	vector_1.c	/^t_vec	*new_vector(float num1, float num2, float nu/
point_at_param	ray.c	/^t_vec	*point_at_param(t_ray *ray, float t)$/
point_at_parm	ray.c	/^t_vec	*point_at_parm(float num, t_ray *ray)$/
rand_in_unit_sphere	sphere.c	/^t_vec			*rand_in_unit_sphere()$/
say_hi	hooks.c	/^int	say_hi()$/
set_rand	sphere.c	/^static void		set_rand(t_sphere_difuse_var **var)$/
t_camera	minRT.h	/^}			t_camera;$/
t_col_var	minRT.h	/^}			t_col_var;$/
t_data	minRT.h	/^}			t_data;$/
t_draw	minRT.h	/^}			t_draw;$/
t_hit	minRT.h	/^}			t_hit;$/
t_hit_list	minRT.h	/^}			t_hit_list;$/
t_ray	minRT.h	/^}			t_ray;$/
t_sphere	minRT.h	/^}			t_sphere;$/
t_sphere_difuse_var	minRT.h	/^}			t_sphere_difuse_var;$/
t_vars	hooks.c	/^}               t_vars;$/
t_vec	minRT.h	/^}			t_vec;$/
unit_vec	vector_1.c	/^t_vec	*unit_vec(t_vec *v)$/
vec_copy	vector_2.c	/^t_vec	*vec_copy(t_vec *src)$/
vec_div_num	vector_1.c	/^t_vec	*vec_div_num(t_vec *v1, float num)$/
vec_div_vec	vector_1.c	/^t_vec	*vec_div_vec(t_vec *v1, t_vec *v2)$/
vec_minus_vec	vector_2.c	/^t_vec	*vec_minus_vec(t_vec *v1, t_vec *v2)$/
vec_plus_num	vector.c	/^t_vec	*vec_plus_num(t_vec *v1, float num)$/
vec_plus_vec	vector.c	/^t_vec	*vec_plus_vec(t_vec *v1, t_vec *v2)$/
vec_times_num	vector_1.c	/^t_vec	*vec_times_num(t_vec *v1, float num)$/
