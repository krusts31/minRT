argc_error	utils3.c	/^int	argc_error(char *str)$/
char_parce	parce.c	/^char	char_parce(unsigned char *col, t_pars_vars **/
compute_rand	sphereCore.c	/^static t_vec		*compute_rand(t_sphere_difuse_var **/
create_trgb	colors.c	/^int		create_trgb(int t, int r, int g, int b)$/
cross_vector	vector.c	/^t_vec	*cross_vector(t_vec *v1, t_vec *v2)$/
delete_node	get_next_line_utils.c	/^int			delete_node(t_list123 **info, char **line)$/
dot_vector	vector.c	/^float	dot_vector(t_vec *v1, t_vec *v2)$/
drawCircle	circle.c	/^void drawCircle(t_data *img,int xc, int yc, int x,/
error	utils4.c	/^short	error(t_pars_vars **vars, short ret, t_task /
fl_parce	parce.c	/^char	fl_parce(float *value, t_pars_vars **vars)$/
free_camera	utils4.c	/^void	free_camera(t_task **task)$/
free_cy	utils2.c	/^void	free_cy(t_task **task)$/
free_draw	free_render.c	/^void	*free_draw(t_draw **draw)$/
free_light	utils2.c	/^void	free_light(t_task **task)$/
free_pl	utils2.c	/^void	free_pl(t_task **task)$/
free_rand	sphereCore.c	/^static t_vec		*free_rand(t_sphere_difuse_var **var/
free_sp	utils2.c	/^void	free_sp(t_task **task)$/
free_sq	utils3.c	/^void	free_sq(t_task **task)$/
free_task	utils4.c	/^char	free_task(t_task **task)$/
free_tr	utils2.c	/^void	free_tr(t_task **task)$/
free_var	get_task.c	/^void	free_var(t_pars_vars **vars)$/
ft_Amb_con	Amb.c	/^char	ft_Amb_con(t_task **task, t_pars_vars **vars,/
ft_Amb_con1	Amb.c	/^char	ft_Amb_con1(t_task **task, t_pars_vars **vars/
ft_atof	utils.c	/^float	ft_atof(const char *nptr)$/
ft_atof_con	utils.c	/^static float	ft_atof_con(const char *nptr, float r/
ft_calc_sphere	sphere3.c	/^char	ft_calc_sphere(t_hit **hit, t_hit_sp **hit_sp/
ft_calc_sphere2	sphere3.c	/^char	ft_calc_sphere2(t_hit **hit, float temp, t_sp/
ft_cameraP_con	camera2.c	/^char	ft_cameraP_con(t_cameraP **camera, t_pars_var/
ft_cameraP_con2	camera2.c	/^char	ft_cameraP_con2(t_cameraP **camera, t_pars_va/
ft_check_Amb	Amb.c	/^char	ft_check_Amb(char hit, char hit_dig, char b_c/
ft_check_Amb2	Amb.c	/^char	ft_check_Amb2(char hit_dig, t_pars_vars **var/
ft_check_camera	camera.c	/^char	ft_check_camera(char hit, char hit_dig, char /
ft_check_camera2	camera2.c	/^char	ft_check_camera2(char hit_dig, t_pars_vars **/
ft_check_cy	cylinder.c	/^char	ft_check_cy(char hit, char hit_dig, char b_ch/
ft_check_cy2	cylinder2.c	/^char	ft_check_cy2(char hit_dig, t_pars_vars **vars/
ft_check_cy3	cylinder2.c	/^char	ft_check_cy3(char hit_dig, char comma)$/
ft_check_float	utils.c	/^static float	ft_check_float(const char *nptr, floa/
ft_check_light	light2.c	/^char	ft_check_light(char hit, char hit_dig, char b/
ft_check_light2	light.c	/^char	ft_check_light2(char hit_dig, t_pars_vars **v/
ft_check_pl	plane.c	/^char	ft_check_pl(char hit, char hit_dig, char b_ch/
ft_check_pl2	plane2.c	/^char	ft_check_pl2(char hit_dig, t_pars_vars **vars/
ft_check_res	Res.c	/^char	ft_check_res(char hit, char hit_dig, char b_c/
ft_check_sp	sphere2.c	/^char	ft_check_sp(char hit, char hit_dig, char b_ch/
ft_check_sp2	sphere.c	/^char	ft_check_sp2(char hit_dig, t_pars_vars **vars/
ft_check_sq	squar.c	/^char	ft_check_sq(char hit, char hit_dig, char b_ch/
ft_check_sq2	squar2.c	/^char	ft_check_sq2(char hit_dig, t_pars_vars **vars/
ft_check_tr	triangle.c	/^char	ft_check_tr(char hit, char hit_dig, char b_ch/
ft_check_tr2	triangle2.c	/^char	ft_check_tr2(char hit_dig, t_pars_vars **vars/
ft_check_tr3	triangle2.c	/^char	ft_check_tr3(char hit_dig, char comma)$/
ft_con	get_next_line_utils.c	/^int			ft_con(t_list123 *info, char **line)$/
ft_cy_con	cylinder2.c	/^char	ft_cy_con(t_cy **cy, t_pars_vars **vars, char/
ft_cy_con2	cylinder2.c	/^char	ft_cy_con2(t_cy **cy, t_pars_vars **vars, cha/
ft_free_image	camera3.c	/^void		*ft_free_image(t_image_plane **plane)$/
ft_free_image_vars	camera3.c	/^void		*ft_free_image_vars(t_image_var **vars)$/
ft_image_error	camera3.c	/^void		*ft_image_error(t_image_var **var, t_image_p/
ft_init_image	camera3.c	/^t_image_var	*ft_init_image()$/
ft_init_image_plane	camera3.c	/^t_image_plane	*ft_init_image_plane()$/
ft_isfloat	utils.c	/^size_t	ft_isfloat(char fl)$/
ft_light_con	light.c	/^char	ft_light_con(t_light **light, t_pars_vars **v/
ft_light_con2	light.c	/^char	ft_light_con2(t_light **light, t_pars_vars **/
ft_lst_b	get_next_line_utils.c	/^t_list123	*ft_lst_b(t_list123 **lst, t_list123 *ne/
ft_lstadd_back_c	camera.c	/^void		ft_lstadd_back_c(t_cameraP **lst, t_cameraP /
ft_lstadd_back_cy	cylinder.c	/^void		ft_lstadd_back_cy(t_cy **lst, t_cy *new)$/
ft_lstadd_back_l	light2.c	/^void		ft_lstadd_back_l(t_light **lst, t_light *new/
ft_lstadd_back_pl	plane.c	/^void		ft_lstadd_back_pl(t_pl **lst, t_pl *new)$/
ft_lstadd_back_sp	sphere2.c	/^void		ft_lstadd_back_sp(t_sp **lst, t_sp *new)$/
ft_lstadd_back_sq	squar.c	/^void		ft_lstadd_back_sq(t_sq **lst, t_sq *new)$/
ft_lstadd_back_tr	triangle.c	/^void		ft_lstadd_back_tr(t_tr **lst, t_tr *new)$/
ft_lstlast_c	camera.c	/^t_cameraP	*ft_lstlast_c(t_cameraP *lst)$/
ft_lstlast_cy	cylinder.c	/^t_cy	*ft_lstlast_cy(t_cy *lst)$/
ft_lstlast_l	light2.c	/^t_light	*ft_lstlast_l(t_light *lst)$/
ft_lstlast_pl	plane.c	/^t_pl	*ft_lstlast_pl(t_pl *lst)$/
ft_lstlast_sp	sphere2.c	/^t_sp	*ft_lstlast_sp(t_sp *lst)$/
ft_lstlast_sq	squar.c	/^t_sq	*ft_lstlast_sq(t_sq *lst)$/
ft_lstlast_tr	triangle.c	/^t_tr	*ft_lstlast_tr(t_tr *lst)$/
ft_new_camera	camera.c	/^t_cameraP	*ft_new_camera()$/
ft_new_cy	cylinder.c	/^t_cy	*ft_new_cy()$/
ft_new_light	light2.c	/^t_light	*ft_new_light()$/
ft_new_line	get_next_line.c	/^static int	ft_new_line(char **line, t_list123 *inf/
ft_new_pl	plane.c	/^t_pl	*ft_new_pl()$/
ft_new_sp	sphere2.c	/^t_sp	*ft_new_sp()$/
ft_new_sq	squar.c	/^t_sq	*ft_new_sq()$/
ft_new_tr	triangle.c	/^t_tr	*ft_new_tr()$/
ft_null_byte	get_next_line.c	/^static int	ft_null_byte(t_list123 *info)$/
ft_parc_Amb	Amb.c	/^char	ft_parc_Amb(t_task **task, t_pars_vars **vars/
ft_parc_camera	camera.c	/^char	ft_parc_camera(t_task **task, t_pars_vars **v/
ft_parc_cy	cylinder.c	/^char	ft_parc_cy(t_task **task, t_pars_vars **vars)/
ft_parc_light	light2.c	/^char	ft_parc_light(t_task **task, t_pars_vars **va/
ft_parc_pl	plane.c	/^char	ft_parc_pl(t_task **task, t_pars_vars **vars)/
ft_parc_res	Res.c	/^char	ft_parc_res(t_task **task, t_pars_vars **vars/
ft_parc_sp	sphere2.c	/^char	ft_parc_sp(t_task **task, t_pars_vars **vars)/
ft_parc_sq	squar.c	/^char	ft_parc_sq(t_task **task, t_pars_vars **vars)/
ft_parc_tr	triangle.c	/^char	ft_parc_tr(t_task **task, t_pars_vars **vars)/
ft_parce_args	get_task.c	/^int	ft_parce_args(t_task **task, t_pars_vars **var/
ft_parce_args2	get_task.c	/^char	ft_parce_args2(t_task **task, t_pars_vars **v/
ft_pl_con	plane2.c	/^char	ft_pl_con(t_pl **pl, t_pars_vars **vars, char/
ft_pl_con2	plane2.c	/^char	ft_pl_con2(t_pl **pl, t_pars_vars **vars, cha/
ft_res_con	Res.c	/^char	ft_res_con(t_task **task, t_pars_vars **vars,/
ft_size_t_len	utils3.c	/^size_t	ft_size_t_len(size_t nr)$/
ft_sp_con	sphere.c	/^char	ft_sp_con(t_sp **sp, t_pars_vars **vars, char/
ft_sp_con2	sphere.c	/^char	ft_sp_con2(t_sp **sp, t_pars_vars **vars, cha/
ft_sq_con	squar2.c	/^char	ft_sq_con(t_sq **sq, t_pars_vars **vars, char/
ft_sq_con2	squar2.c	/^char	ft_sq_con2(t_sq **sq, t_pars_vars **vars, cha/
ft_tr_con	triangle2.c	/^char	ft_tr_con(t_tr **tr, t_pars_vars **vars, char/
ft_tr_con2	triangle2.c	/^char	ft_tr_con2(t_tr **tr, t_pars_vars **vars, cha/
get_b	colors.c	/^int		get_b(int trgb)$/
get_color	colors2.c	/^t_vec	*get_color(t_task **task, t_draw **draw, int/
get_g	colors.c	/^int		get_g(int trgb)$/
get_next_line	get_next_line.c	/^int			get_next_line(int fd, char **line)$/
get_r	colors.c	/^int		get_r(int trgb)$/
get_ray	cameraCore.c	/^t_ray	*get_ray(float u, float v, t_cameraP *cam)$/
get_t	colors.c	/^int		get_t(int trgb)$/
gnl_con	get_next_line.c	/^static int	gnl_con(t_list123 **info, t_list123 **t/
hit_sphere	sphereCore.c	/^int			hit_sphere(t_ray *ray, float closest_so_far,/
hitable_list	hit_list.c	/^int	hitable_list(t_ray *ray, float closest_so_far,/
init	utils4.c	/^char	init(t_task **task, t_pars_vars **vars)$/
init_col_var	free_render.c	/^int	init_col_var(t_col_var **var)$/
init_draw	free_render.c	/^int	init_draw(t_draw **draw, int xs, int ys, int n/
init_list	get_next_line_utils.c	/^t_list123	*init_list(int fd)$/
init_task	utils4.c	/^char	init_task(t_task **task)$/
len_to_c	get_next_line_utils.c	/^int			len_to_c(char *line, char hit, int ret, t_li/
length_of_vector	vector.c	/^float	length_of_vector(t_vec *self)$/
length_of_vector_pow2	vector_2.c	/^float		length_of_vector_pow2(t_vec *self)$/
my_mlx_pixel_put	pixel.c	/^void            my_mlx_pixel_put(t_data *data, int/
new_image_plane	cameraCore.c	/^t_image_plane	*new_image_plane(float FOV, float po/
new_img_con	cameraCore.c	/^int		new_img_con(float FOV, float p, t_image_var */
new_img_con2	cameraCore.c	/^int		new_img_con2(t_image_plane **new, t_image_var/
new_ray	ray.c	/^t_ray	*new_ray(t_vec *vec1, t_vec *vec2)$/
new_task	get_task.c	/^t_task	*new_task(int argc, char **argv)$/
new_vector	vector_1.c	/^t_vec	*new_vector(float num1, float num2, float nu/
new_vector_uc	vector_2.c	/^t_vec_uc	*new_vector_uc(int num1, int num2, int nu/
parce_argv_1	get_task.c	/^char	parce_argv_1(char *argv)$/
point_at_param	ray.c	/^t_vec	*point_at_param(t_ray *ray, float t)$/
point_at_parm	ray.c	/^t_vec	*point_at_parm(float num, t_ray *ray)$/
print_res	print_res.c	/^void	print_res(t_task *task)$/
rand_in_unit_sphere	sphereCore.c	/^t_vec			*rand_in_unit_sphere()$/
read_and_copy	get_next_line.c	/^static void	read_and_copy(t_list123 *info)$/
set_rand	sphereCore.c	/^static void		set_rand(t_sphere_difuse_var **var)$/
t_amb_light	varibles.h	/^}			t_amb_light;$/
t_camera	varibles.h	/^}			t_camera;$/
t_cameraP	varibles.h	/^}			t_cameraP;$/
t_col_var	varibles.h	/^}			t_col_var;$/
t_cy	varibles.h	/^}			t_cy;$/
t_data	varibles.h	/^}			t_data;$/
t_draw	varibles.h	/^}			t_draw;$/
t_hit	varibles.h	/^}			t_hit;$/
t_hit_sp	varibles.h	/^}			t_hit_sp;$/
t_image_plane	varibles.h	/^}			t_image_plane;$/
t_image_var	varibles.h	/^}			t_image_var;$/
t_light	varibles.h	/^}			t_light;$/
t_list123	get_next_line.h	/^}				t_list123;$/
t_pars_vars	varibles.h	/^}			t_pars_vars;$/
t_pl	varibles.h	/^}			t_pl;$/
t_ray	varibles.h	/^}			t_ray;$/
t_sp	varibles.h	/^}			t_sp;$/
t_sphere_difuse_var	varibles.h	/^}			t_sphere_difuse_var;$/
t_sq	varibles.h	/^}			t_sq;$/
t_task	varibles.h	/^}			t_task;$/
t_tr	varibles.h	/^}			t_tr;$/
t_vec	varibles.h	/^}			t_vec;$/
t_vec_uc	varibles.h	/^}			t_vec_uc;$/
unit_vec	vector_1.c	/^t_vec	*unit_vec(t_vec *v)$/
vec_copy	vector_2.c	/^t_vec		*vec_copy(t_vec *src)$/
vec_div_num	vector_1.c	/^t_vec	*vec_div_num(t_vec *v1, float num)$/
vec_div_vec	vector_1.c	/^t_vec	*vec_div_vec(t_vec *v1, t_vec *v2)$/
vec_minus_vec	vector_2.c	/^t_vec		*vec_minus_vec(t_vec *v1, t_vec *v2)$/
vec_plus_num	vector.c	/^t_vec	*vec_plus_num(t_vec *v1, float num)$/
vec_plus_vec	vector.c	/^t_vec	*vec_plus_vec(t_vec *v1, t_vec *v2)$/
vec_times_num	vector_1.c	/^t_vec	*vec_times_num(t_vec *v1, float num)$/
